// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.20.3
// source: apps/wrapper-controller/src/v1/grpc/protos/user-auth.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "vn.grpc.nodejs.user_auth.service";

export interface Empty {
}

export interface GoogleLoginDTO {
  email: string;
  token: string;
}

export interface LoginDTO {
  email: string;
  password: string;
}

export interface ValidateTokenDTO {
  accessToken: string;
  refreshToken: string;
}

export interface BaseResponse {
  status: number;
  message: string;
  data: tokenResponse | undefined;
}

export interface tokenResponse {
  accessToken: string;
  refreshToken: string;
  accessTokenExpires: string;
  isRefresh: number;
}

export const VN_GRPC_NODEJS_USER_AUTH_SERVICE_PACKAGE_NAME = "vn.grpc.nodejs.user_auth.service";

export interface AuthServiceClient {
  signIn(request: LoginDTO, metadata?: Metadata): Observable<BaseResponse>;

  validateToken(request: ValidateTokenDTO, metadata?: Metadata): Observable<BaseResponse>;

  refreshToken(request: Empty, metadata?: Metadata): Observable<BaseResponse>;

  googleLogin(request: GoogleLoginDTO, metadata?: Metadata): Observable<BaseResponse>;
}

export interface AuthServiceController {
  signIn(request: LoginDTO, metadata?: Metadata): Promise<BaseResponse> | Observable<BaseResponse> | BaseResponse;

  validateToken(
    request: ValidateTokenDTO,
    metadata?: Metadata,
  ): Promise<BaseResponse> | Observable<BaseResponse> | BaseResponse;

  refreshToken(request: Empty, metadata?: Metadata): Promise<BaseResponse> | Observable<BaseResponse> | BaseResponse;

  googleLogin(
    request: GoogleLoginDTO,
    metadata?: Metadata,
  ): Promise<BaseResponse> | Observable<BaseResponse> | BaseResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["signIn", "validateToken", "refreshToken", "googleLogin"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
