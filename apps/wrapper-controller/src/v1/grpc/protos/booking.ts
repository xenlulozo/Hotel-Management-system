// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.20.3
// source: apps/wrapper-controller/src/v1/grpc/protos/booking.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "vn.grpc.nodejs.booking.service";

export interface DetailDTO {
  id: string;
}

export interface BaseResponse {
  status: number;
  message: string;
  data: BookingTemplate | undefined;
}

export interface RateAmount {
  amount: number;
  currency: string;
}

export interface BookingTemplate {
  confirmationNo: string;
  resvNameId: string;
  rateamount: RateAmount | undefined;
  roomtype: string;
  ratecode: string;
  arrival: string;
  departure: string;
  bookingBalance: number;
  adults: number;
  children: number;
  guarantee: string;
  methodPayment: string;
  firstName: string;
  lastName: string;
  title: string;
  bookingCreatedDate: string;
}

export const VN_GRPC_NODEJS_BOOKING_SERVICE_PACKAGE_NAME = "vn.grpc.nodejs.booking.service";

export interface BookingServiceClient {
  getBooking(request: DetailDTO, metadata?: Metadata): Observable<BaseResponse>;
}

export interface BookingServiceController {
  getBooking(request: DetailDTO, metadata?: Metadata): Promise<BaseResponse> | Observable<BaseResponse> | BaseResponse;
}

export function BookingServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getBooking"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("BookingService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("BookingService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const BOOKING_SERVICE_NAME = "BookingService";
